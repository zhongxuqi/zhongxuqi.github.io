<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xuqi.Zhong的博客</title>
    <link>https://zhongxuqi.github.io/</link>
    <description>Recent content on Xuqi.Zhong的博客</description>
    <image>
      <title>Xuqi.Zhong的博客</title>
      <url>https://opensea.io/zh-CN/assets/ethereum/0xaf6434ff6a3a1fe62473dfacccda043caff6793c/2890</url>
      <link>https://opensea.io/zh-CN/assets/ethereum/0xaf6434ff6a3a1fe62473dfacccda043caff6793c/2890</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Feb 2023 21:57:17 +0800</lastBuildDate><atom:link href="https://zhongxuqi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深度解读GMX：去中心化永续合约交易所</title>
      <link>https://zhongxuqi.github.io/web3/2023-02-27/</link>
      <pubDate>Mon, 27 Feb 2023 21:57:17 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/web3/2023-02-27/</guid>
      <description>0 GMX项目发展史 在2020年10月，xvi10启动了 xvix-contracts 项目，并部署到了Ethereum Mainnet。 在2021年3月，xvi10把 xvix-contracts 升级为 gambit-contracts ，并部署到了BSC。 在2021年9月，xvi10基于 gambit-contracts 启动GMX项目，并部署到了Arbitrum One。 在启动一周后，GMX完成了第一次升级，在eth、wbtc和usdc的基础上，添加了link、uni和usdt。 在启动三个月后，GMX，完成了第二次升级，部署到了Avalanche链上。
1 GMX的产品设计目标 GMX的产品设计目标是打造一个去中心化的永续合约和现货交易平台。不需要任何注册、KYC和地域限制等限制，用户即可方便地用它进行链上资产交易和合约交易。
2 GMX的核心卖点  去中心化。GMX是一个去中心化的永续合约交易平台，所有资产由智能合约保管，智能合约开源，所有运营数据也是公开透明的。 全额保证金。GMX上面的所有杠杆订单都是有全额保证金的，保障用户的收益能够钢性对付，很多中心化交易所都无法做到全额保证金。 无需许可Permissionless。所有人都可以公平得参与平台做市，并且根据GMX和GLP持有量平等地分到平台的盈利。 市场报价去中心化。系统报价主要由ChainLink和报价机器人组成，报价公开透明，有效避免了恶意插针等扰乱市场的行为。  3 GMX的系统整体设计 3.1 GMX系统架构图 其中，Vault合约是整个GMX的核心，负责管理GMX平台的全部资产。
3.2 系统核心数据模型 { 	&amp;#34;id&amp;#34;: keccak256(_account, _collateralToken, _indexToken, _isLong), // 仓位ID 	&amp;#34;size&amp;#34;: uint256, // Position大小 	&amp;#34;collateral&amp;#34;: uint256, // 抵押品价格 USD 	&amp;#34;averagePrice&amp;#34;: uint256, // 平均持仓价格 USD 	&amp;#34;entryFundingRate&amp;#34;: uint256, // 入场资金费率 	&amp;#34;reserveAmount&amp;#34;: uint256, // 抵押品token储备数量 	&amp;#34;realisedPnl&amp;#34;: int256, // 已兑付盈亏 	&amp;#34;lastIncreasedTime&amp;#34;: uint256, // 最后加仓时间 } 盈亏USD价值计算：</description>
    </item>
    
    <item>
      <title>解读闪电网络Lightning Network原理</title>
      <link>https://zhongxuqi.github.io/web3/2023-02-07/</link>
      <pubDate>Tue, 07 Feb 2023 17:01:46 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/web3/2023-02-07/</guid>
      <description>随着Damus最近的大火，其内置的比特币闪电网络Lightning Network打赏功能也走进了大众的视野。闪电网络的比特币容量也随之猛增到5400枚，创下历史新高。那么下面我们就重点来介绍一下闪电网络的作用和工作原理。
什么是闪电网络 闪电网络是建立在Bitcoin链上的2层网络，即Bitcoin的L2。它的主要作用是解决比特币扩展性和交易手续费高的问题。 可以说闪电网络的TPS远超市面上所有区块链技术，如下表所示
    Lightning Network Solana Visa Paypal Ethereum Bitcoin     TPS 40,000,000 65,000 24,000 193 15 7    闪电网络的TPS是目前区块链所有扩容方案中最高的，满足了目前所有的支付场景需求。
闪电网络的工作原理 闪电网络的基本流程就是在用户之间点对点地建立一些支付通道，建立好通道的用户可以方便地进行链下建议。然后随着越来越多的用户之间建立了支付通道，就形成了一张支付通道网络，就此闪电网络就形成了，只要在网络中的用户之间都可以进行相互链下交易。
建立支付通道 支付通道是点对点的，即两个用户之间。打个比方，用户A和用户B要建立一个10btc的支付通道，他们分别都支付了5btc（实际A和B的通道建立金额可以任意），具体如下图所示 上图的流程步骤为：
 A和B分别用自己的UTXO-A和UTXO-B作为输入，共同签名上链并输出了UTXO-AB A生成链下交易TX-A1，并让B对TX-A1签名。 B生成链下交易TX-B1，并让A对TX-B1签名。  其中UTXO-AB就是A和B之间建立的支付通道，TX-A1和TX-B1不需要广播到链上，如果TX-A1和TX-B1被广播到链上就代表支付通道被关闭了。 TX-A1由A持有，TX-B1由B持有，他们都可以随时关闭通道取出自己的钱。 如果A广播了TX-A1，那么就会生成UTXO-A1-A和UTXO-A1-B。 UTXO-A1-A的使用需要满足以下条件之一即可：
 需要等x个区块才能被A密钥使用 可以用B密钥和A1密钥共同签名使用，A1密钥由A保管  UTXO-A1-B的使用需要满足以下条件之一即可：
 用B密钥签名即可使用  同理如果B广播了TX-B1，那么就会生成UTXO-B1-A和UTXO-B1-B。 UTXO-B1-A的使用需要满足以下条件之一即可：
 用A密钥签名即可使用  UTXO-B1-B的使用需要满足以下条件之一即可：
 需要等x个区块才能被B密钥使用 可以用A密钥和B1密钥共同签名使用，B1密钥由B保管  用户之间点对点转账 用户A要向用户B转1个BTC，具体流程图如下 具体流程为
 用户A用A2密值构建交易TX-A2，并提交给用户B签名，用户B把TX-A2的签名传给用户A 用户A把A1密值传给B 用户B用B2密值构建交易TX-B2，并提交给用户A签名，用户A把TX-B2的签名传给用户B 用户B把B2密值传给A 完成以上4步后才算转账完成  如何防止用户作恶 假设用户A想作恶，转账给B 1个BTC后，故意把TX-A1广播出去，企图从支付通道中取回5BTC。 具体流程如下</description>
    </item>
    
    <item>
      <title>解读Damus和去中心化社交协议Nostr</title>
      <link>https://zhongxuqi.github.io/web3/2023-02-04/</link>
      <pubDate>Sat, 04 Feb 2023 11:22:57 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/web3/2023-02-04/</guid>
      <description>近期damus社交软件大火，作为web3赛道率先上线app store的应用，很快引起了圈内圈外人士的关注。那么不少会有一个疑问，同样作为社交软件，web3赛道的damus相比于web2赛道的twitter和微博有什么优势，用户为什么要迁移到web3社交产品呢？ 首先，看下damus官方给出的web2社交的一些关键问题：
 web2社交有广告，比如twitter上经常会看到一些广告，非常影响用户体验。 web2社交会使用一些推荐技术让用户上瘾，比如twitter、tiktok都有自己的推荐算法，推荐算法会根据用户喜好不断推荐一些类似的内容，吸引用户留存。 web2产品能封禁用户，比如特朗普的twitter账户就曾被twitter封禁。 web2产品能对用户限流，导致用户的推文无法被其它用户看到。 web2产品有很多垃圾信息。  上述问题导致web2产品无法实现真正的言论自由，根本原因在于web2产品是有专门中心化的公司和机构运营和维护，而且永远无法被替换。这些公司和机构为了盈利的目的，会破坏社交软件的言论自由。 为了实现真正的言论自由，web3就是一个很好的技术发展方向。web3的任何产品都不会由中心化的机构和公司来维护和运营，全靠社区和用户自主来维护，而且产品的代码也是开源的，任何人都可以下载阅读并参与开发。 那么Damus是如何做到的呢？那就不得不说一下它背后的去中心化社交协议Nostr了。打个比方，如果说Damus是一个大楼，那么nostr就是这个大楼的地基。
技术原理 Nostr是什么 Nostr是一个p2p的社交网络协议，基于密码学的公钥私钥和签名技术，并且不需要依赖任何的中心化服务器。
Nostr是如何工作的 Nostr网络由client和relay两个角色组成，用户运行client（比如手机上运行damus客户端），任何个人或者机构都可以运行relay。
发送推文流程  第一步，用户使用客服端需要先生成公钥私钥，私钥相当于用户身份，不能对外公开。 第二步，用户在客户端提交推文内容，client会用私钥对推文内容进行签名， 第三步，client会把推文、公钥和签名发送到配置好的relay，relay会用公钥校验签名正确性。 推文内容格式为  {  &amp;#34;id&amp;#34;: &amp;#34;&amp;lt;消息ID&amp;gt;&amp;#34;,  &amp;#34;pubkey&amp;#34;: &amp;#34;&amp;lt;用户公钥&amp;gt;&amp;#34;,  &amp;#34;created_at&amp;#34;: &amp;#34;&amp;lt;创建时间&amp;gt;&amp;#34;,  &amp;#34;kind&amp;#34;: &amp;#34;&amp;lt;消息类型&amp;gt;&amp;#34;,  &amp;#34;tags&amp;#34;: [ // &amp;lt;用于订阅规则过滤&amp;gt;  [&amp;#34;e&amp;#34;, &amp;#34;&amp;lt;其它推文ID&amp;gt;&amp;#34;, &amp;#34;&amp;lt;推荐relay地址&amp;gt;&amp;#34;],  [&amp;#34;p&amp;#34;, &amp;#34;&amp;lt;公钥&amp;gt;&amp;#34;, &amp;#34;&amp;lt;推荐relay地址&amp;gt;&amp;#34;]  ... // other kinds of tags may be included later  ],  &amp;#34;content&amp;#34;: &amp;#34;&amp;lt;推文内容&amp;gt;&amp;#34;,  &amp;#34;sig&amp;#34;: &amp;#34;&amp;lt;私钥签名&amp;gt;&amp;#34; } 其中，id=sha256(JSON.</description>
    </item>
    
    <item>
      <title>用Hardhat开发智能合约，并发布ERC721 NFT</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-08-19/</link>
      <pubDate>Thu, 18 Aug 2022 22:25:37 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-08-19/</guid>
      <description>1. 安装Hardhat npm install --save-dev hardhat 2. 初始化Hardhat工程 npx hardhat 3. 安装官方contract库 npm install @openzeppelin/contracts 4. 完成ERC721 NFT智能合约代码 目录contracts/DrawNFT.sol
// SPDX-License-Identifier: MIT pragma solidity ^0.8.4;  import &amp;#34;@openzeppelin/contracts/token/ERC721/ERC721.sol&amp;#34;; import &amp;#34;@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol&amp;#34;; import &amp;#34;@openzeppelin/contracts/access/Ownable.sol&amp;#34;; import &amp;#34;@openzeppelin/contracts/utils/Counters.sol&amp;#34;;  contract DrawNFT is ERC721, ERC721URIStorage, Ownable {  using Counters for Counters.Counter;   Counters.Counter private _tokenIdCounter;   constructor() ERC721(&amp;#34;DrawNFT&amp;#34;, &amp;#34;DNFT&amp;#34;) {}   function safeMint(address to, string memory uri) public onlyOwner {  uint256 tokenId = _tokenIdCounter.</description>
    </item>
    
    <item>
      <title>用Hardhat开发智能合约，并发布ERC20 Token</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-08-18/</link>
      <pubDate>Thu, 18 Aug 2022 14:25:12 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-08-18/</guid>
      <description>1. 安装Hardhat npm install --save-dev hardhat 2. 初始化Hardhat工程 npx hardhat 3. 安装官方contract库 npm install @openzeppelin/contracts 4. 完成Token智能合约代码 目录contracts/DrawToken.sol
// SPDX-License-Identifier: MIT pragma solidity ^0.8.4;  import &amp;#34;@openzeppelin/contracts/token/ERC20/ERC20.sol&amp;#34;; import &amp;#34;@openzeppelin/contracts/access/Ownable.sol&amp;#34;;  contract DrawToken is ERC20, Ownable {  constructor() ERC20(&amp;#34;DrawToken&amp;#34;, &amp;#34;DTK&amp;#34;) {}   function mint(address to, uint256 amount) public onlyOwner {  _mint(to, amount);  } } 5. 完成合约部署代码 目录scripts/deploy.ts
import { ethers } from &amp;#34;hardhat&amp;#34;;  async function main() {  // DrawToken  const DrawToken = await ethers.</description>
    </item>
    
    <item>
      <title>Eth智能合约签名校验 - 可用于实现多签合约</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-03-27/</link>
      <pubDate>Sun, 27 Mar 2022 08:08:21 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-03-27/</guid>
      <description>1. 对message进行签名 from eth_account.messages import encode_defunct from web3 import Web3 from eth_keys import keys  KEY = ... # 填写账户私钥 w3 = Web3(Web3.HTTPProvider(&amp;lt;input eth node url/&amp;gt;)) # 请填写以太坊的节点url account = w3.eth.account.from_key(KEY) print(&amp;#39;address: &amp;#39;, account.address) rawText = &amp;#39;hello&amp;#39; # 签名message signedMessage = account.sign_message(encode_defunct(text=rawText)) print(&amp;#39;message hash: &amp;#39;, signedMessage.messageHash.hex()) # print(signedMessage) print(&amp;#39;v: &amp;#39;, int(signedMessage.v)) print(&amp;#39;r: &amp;#39;, hex(signedMessage.r)) print(&amp;#39;s: &amp;#39;, hex(signedMessage.s)) print(&amp;#39;signature: &amp;#39;, signedMessage.signature.hex()) print(w3.eth.account.recover_message(encode_defunct(text=rawText), signature=signedMessage.signature)) 2. 执行脚本，得到 address: 0x1c74c86906d91766e143e1d009C8604b66001363 message hash: 0x50b2c43fd39106bafbba0da34fc430e1f91e3c96ea2acee2bc34119f92b37750 v: 28 r: 0x5a0121bea4f2c1e9e6aad76bd3e06191a533c0b53a77df31e3b6310dbf4f698f s: 0x17216a4bfd7cf812bf2a6d9b44122c807880a5cb3de403d4baa8e0fb352189dd signature: 0x5a0121bea4f2c1e9e6aad76bd3e06191a533c0b53a77df31e3b6310dbf4f698f17216a4bfd7cf812bf2a6d9b44122c807880a5cb3de403d4baa8e0fb352189dd1c 0x1c74c86906d91766e143e1d009C8604b66001363 3.</description>
    </item>
    
    <item>
      <title>打造以太坊私有链，合约的部署与使用</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-03-15/</link>
      <pubDate>Tue, 15 Mar 2022 17:33:37 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-03-15/</guid>
      <description>1. 下载 $ git clone https://github.com/ethereum/go-ethereum.git 2. 编译 $ cd go-ethereum $ make geth 把./build/bin/geth添加到可执行路径中
3. 配置初始状态 保存配置到genesis.json文件
{  &amp;#34;config&amp;#34;: {  &amp;#34;chainId&amp;#34;: 7777,  &amp;#34;homesteadBlock&amp;#34;: 0,  &amp;#34;eip150Block&amp;#34;: 0,  &amp;#34;eip155Block&amp;#34;: 0,  &amp;#34;eip158Block&amp;#34;: 0,  &amp;#34;byzantiumBlock&amp;#34;: 0,  &amp;#34;constantinopleBlock&amp;#34;: 0,  &amp;#34;petersburgBlock&amp;#34;: 0,  &amp;#34;ethash&amp;#34;: {}  },  &amp;#34;difficulty&amp;#34;: &amp;#34;1&amp;#34;,  &amp;#34;gasLimit&amp;#34;: &amp;#34;8000000&amp;#34;,  &amp;#34;alloc&amp;#34;: {  &amp;#34;7df9a875a174b3bc565e6424a0050ebc1b2d1d82&amp;#34;: { &amp;#34;balance&amp;#34;: &amp;#34;300000&amp;#34; },  &amp;#34;f41c74c9ae680c1aa78f42e5647a62f353b7bdde&amp;#34;: { &amp;#34;balance&amp;#34;: &amp;#34;400000&amp;#34; }  } } 执行geth init --datadir data genesis.</description>
    </item>
    
    <item>
      <title>使用docker进行项目开发</title>
      <link>https://zhongxuqi.github.io/tools/2017-04-07/</link>
      <pubDate>Fri, 07 Apr 2017 15:46:39 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/tools/2017-04-07/</guid>
      <description>docker是目前大红大紫的云计算技术，它极大的简化项目的部署并提高计算资源的利用率；同样，它也能用于项目的开发，提高代码的开发效率。
用docker进行项目开发的优点  不会污染当前环境，包括环境变量和临时文件。 方便得进行第三方库的版本管理，例如可以分别构建go1.7和go1.8的docker image，编译的时候只用切换docker image就可以实现用不同的go版本进行代码编译。 团队合作中，可以方便地保证大家使用的编译环境是一样的，避免了很多不必要的问题。  用docker进行开发的具体实现步骤 以lowtea为例子，介绍如何用docker进行项目开发。
构建docker image 前端docker image的Dockerfile，构建出前端运行环境image。
FROMhub.c.163.com/library/node:6.10.0MAINTAINERzhongxuqiRUN npm install -g bower &amp;amp;&amp;amp; npm install -g gulp &amp;amp;&amp;amp; mkdir /workspaceWORKDIR/workspace后端docker image的Dockerfile，构建出后端运行环境的image。
FROMhub.c.163.com/library/golang:1.7.4MAINTAINERzhongxuqiRUN mkdir /golang &amp;amp;&amp;amp; export GOPATH=/golang &amp;amp;&amp;amp; mkdir /workspaceWORKDIR/workspace编写Makefile SHELL=/bin/bash  lowtea-frontend: 	cd lowtea/front &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; gulp serve  docker-lowtea-frontend: 	cd lowtea/front &amp;amp;&amp;amp; npm install &amp;amp;&amp;amp; gulp serve -p http://lowtea-backend:7070  lowtea-backend: 	cd lowtea &amp;amp;&amp;amp; source env.</description>
    </item>
    
    <item>
      <title>监听Android APP网络请求的一种方法</title>
      <link>https://zhongxuqi.github.io/mobile/2017-03-27/</link>
      <pubDate>Mon, 27 Mar 2017 11:11:12 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/mobile/2017-03-27/</guid>
      <description>目前市面上有很多APM厂商，用户只用集成Android SDK，写一行启动代码就可以轻松实现对APP网络请求的监听，非常神奇。本文就介绍一种可以实现该功能的技术，实现对APP网络请求的全量监听。
需求  SDK集成后能实现对APP网络请求的监听。 接入无成本，只需要少量的启动代码，不需要修改已有的代码。  可以实现监听网络请求的技术方案 1. 实现整个http网络框架，让用户去调用。 该方案实现成本过高，而且接入成本也很高，基本不能实现。
2. Android热修复方案 目前以Dexposed为代表的热修复方案无法支持ART虚拟机，不能用于5.0以上的Android操作系统；以Nova为代表的热修复方案需要首先被加载并且无法对修改现有类进行修改，不能用于sdk。
3. Java AOP编程技术 该方案能成功实现对Java的Hook，而且灵活可控，能够有效实现对API的监听。
现有Java AOP技术  Apt Aspectj Javassit  它们的区别如下图所示 本文采用Aspectj来实现网络请求监听SDK
Android Aspectj插件 Android Aspectj Git Repo
接入步骤如下所示：  关闭Android Intant Run  修改Project的.gradle文件  修改Module的.gradle文件   API Hook语法介绍 常用的annotation有Before、Around、After，分别是在目标函数(需要进行aspectj hook的函数)执行的前、中、后期进行hook。主要的hook方式分为call和execution两种，它们区别如下所示: call
// &amp;lt;------- before call JoinPoint targetFunc() // &amp;lt;------ around call JoinPoint // &amp;lt;------- after call JoinPoint exection
targetFunc() {  // &amp;lt;------- before execution JoinPoint  .</description>
    </item>
    
    <item>
      <title>[ACM] 求数组的最小和分割法的一种O(N*logN)思路</title>
      <link>https://zhongxuqi.github.io/acm/2017-03-26/</link>
      <pubDate>Sun, 26 Mar 2017 15:32:25 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/acm/2017-03-26/</guid>
      <description>题目 一个长度为N的数组，有M(M &amp;lt; N)个插板。在每个分割方案中，每个分组和的最大值作为该分割方式的值。那么求最优方案使得值为最小
example input: N=[2,5,7,4,7,4], M=3
output 7
动态规划思路(O(N^M)) 令状态最优函数为f(i,j,k)，含义为从第i个数到第j个放入k个插板的最优解，那个可以得出状态转移公式为
f(i,j,k) = Min{  Max{  f(i,i,ceil(k/2) - 1),  f(i+2,j,floor(k/2))  },  ...  ,  Max{  f(i,i+x,ceil(k/2) - 1),  f(i+x+1,j,floor(k/2))  },  ...  ,  Max{  f(i,j-1,ceil(k/2) - 1),  f(j,j,floor(k/2))  } } 其中，floor(x)为小于x的最大整数，ceil(x)为大于x的最小整数。 从上可知，状态转移函数的时间复杂度为N，k的取值范围是[1, M]，所以计算复杂度为O(N^M)。
另类思路(O(N*logN)) 先求出数组的和为sum，因此可知最优方案的取值范围是[sum/(M+1),sum]。 所以可以通过二分法查找最大值，假设初始值为(sum/(M+1) + sum) / 2 = sum * M / (M + 1) / 2。 然后把每次估计出来的最优值代入数组中验证，即从头到尾遍历一次数组，当和快超过估计值的时候，放入一个插板并把累计值置零，重新累加。 依次迭代，最终便可得出最优解。 二分法查找的复杂度为logN，每次遍历的复杂度为O(N) 因此，该方法的复杂度为O(N*logN)</description>
    </item>
    
    
    
  </channel>
</rss>
