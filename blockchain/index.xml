<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchains on ZhongXuQi的技术博客</title>
    <link>https://zhongxuqi.github.io/blockchain/</link>
    <description>Recent content in Blockchains on ZhongXuQi的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Aug 2022 14:25:12 +0800</lastBuildDate><atom:link href="https://zhongxuqi.github.io/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用Hardhat开发智能合约，并发布ERC20 Token</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-08-18/</link>
      <pubDate>Thu, 18 Aug 2022 14:25:12 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-08-18/</guid>
      <description>1. 安装Hardhat npm install --save-dev hardhat  2. 初始化Hardhat工程 npx hardhat  3. 安装官方contract库 npm install @openzeppelin/contracts  4. 完成Token智能合约代码 目录contracts/DrawToken.sol
// SPDX-License-Identifier: MIT pragma solidity ^0.8.4; import &amp;quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&amp;quot;; import &amp;quot;@openzeppelin/contracts/access/Ownable.sol&amp;quot;; contract DrawToken is ERC20, Ownable { constructor() ERC20(&amp;quot;DrawToken&amp;quot;, &amp;quot;DTK&amp;quot;) {} function mint(address to, uint256 amount) public onlyOwner { _mint(to, amount); } }  5. 完成合约部署代码 目录scripts/deploy.ts
import { ethers } from &amp;quot;hardhat&amp;quot;; async function main() { // DrawToken const DrawToken = await ethers.</description>
    </item>
    
    <item>
      <title>Eth智能合约签名校验 - 可用于实现多签合约</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-03-27/</link>
      <pubDate>Sun, 27 Mar 2022 08:08:21 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-03-27/</guid>
      <description>1. 对message进行签名 from eth_account.messages import encode_defunct from web3 import Web3 from eth_keys import keys KEY = ... # 填写账户私钥 w3 = Web3(Web3.HTTPProvider(&amp;lt;input eth node url/&amp;gt;)) # 请填写以太坊的节点url account = w3.eth.account.from_key(KEY) print(&#39;address: &#39;, account.address) rawText = &#39;hello&#39; # 签名message signedMessage = account.sign_message(encode_defunct(text=rawText)) print(&#39;message hash: &#39;, signedMessage.messageHash.hex()) # print(signedMessage) print(&#39;v: &#39;, int(signedMessage.v)) print(&#39;r: &#39;, hex(signedMessage.r)) print(&#39;s: &#39;, hex(signedMessage.s)) print(&#39;signature: &#39;, signedMessage.signature.hex()) print(w3.eth.account.recover_message(encode_defunct(text=rawText), signature=signedMessage.signature))  2. 执行脚本，得到 address: 0x1c74c86906d91766e143e1d009C8604b66001363 message hash: 0x50b2c43fd39106bafbba0da34fc430e1f91e3c96ea2acee2bc34119f92b37750 v: 28 r: 0x5a0121bea4f2c1e9e6aad76bd3e06191a533c0b53a77df31e3b6310dbf4f698f s: 0x17216a4bfd7cf812bf2a6d9b44122c807880a5cb3de403d4baa8e0fb352189dd signature: 0x5a0121bea4f2c1e9e6aad76bd3e06191a533c0b53a77df31e3b6310dbf4f698f17216a4bfd7cf812bf2a6d9b44122c807880a5cb3de403d4baa8e0fb352189dd1c 0x1c74c86906d91766e143e1d009C8604b66001363  3.</description>
    </item>
    
    <item>
      <title>打造以太坊私有链，合约的部署与使用</title>
      <link>https://zhongxuqi.github.io/blockchain/2022-03-15/</link>
      <pubDate>Tue, 15 Mar 2022 17:33:37 +0800</pubDate>
      
      <guid>https://zhongxuqi.github.io/blockchain/2022-03-15/</guid>
      <description>1. 下载 $ git clone https://github.com/ethereum/go-ethereum.git  2. 编译 $ cd go-ethereum $ make geth  把./build/bin/geth添加到可执行路径中
3. 配置初始状态 保存配置到genesis.json文件
{ &amp;quot;config&amp;quot;: { &amp;quot;chainId&amp;quot;: 7777, &amp;quot;homesteadBlock&amp;quot;: 0, &amp;quot;eip150Block&amp;quot;: 0, &amp;quot;eip155Block&amp;quot;: 0, &amp;quot;eip158Block&amp;quot;: 0, &amp;quot;byzantiumBlock&amp;quot;: 0, &amp;quot;constantinopleBlock&amp;quot;: 0, &amp;quot;petersburgBlock&amp;quot;: 0, &amp;quot;ethash&amp;quot;: {} }, &amp;quot;difficulty&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;gasLimit&amp;quot;: &amp;quot;8000000&amp;quot;, &amp;quot;alloc&amp;quot;: { &amp;quot;7df9a875a174b3bc565e6424a0050ebc1b2d1d82&amp;quot;: { &amp;quot;balance&amp;quot;: &amp;quot;300000&amp;quot; }, &amp;quot;f41c74c9ae680c1aa78f42e5647a62f353b7bdde&amp;quot;: { &amp;quot;balance&amp;quot;: &amp;quot;400000&amp;quot; } } }  执行geth init --datadir data genesis.json，初始化以太坊配置。
4. 运行以太坊节点 执行geth --datadir data --nodiscover --mine console，节点启动。</description>
    </item>
    
  </channel>
</rss>
